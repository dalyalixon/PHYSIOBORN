// src/components/KineSite.jsx
import React, { useMemo, useState, useEffect, useRef } from "react";
import { motion } from "framer-motion";
import {
  Calendar, Mail, Phone, MapPin, Clock, Stethoscope,
  ChevronRight, CheckCircle2, Sparkles, ChevronLeft, ChevronRight as ChevronRightIcon
} from "lucide-react";
import {
  format, addMinutes, parseISO, addDays, isBefore,
  setHours, setMinutes, isToday, startOfDay
} from "date-fns";
import { fr } from "date-fns/locale";
import { Toaster, toast } from "sonner";

import { db } from "../lib/firebase";
import {
  collection, doc, getDocs, runTransaction,
  Timestamp, query, where
} from "firebase/firestore";

// ===== EmailJS =====
import emailjs from "@emailjs/browser";
const EMAILJS_PUBLIC_KEY   = import.meta.env.VITE_EMAILJS_PUBLIC_KEY;
const EMAILJS_SERVICE_ID   = import.meta.env.VITE_EMAILJS_SERVICE_ID;
const EMAILJS_TEMPLATE_ID  = import.meta.env.VITE_EMAILJS_TEMPLATE_ID;       // client
const EMAILJS_ADMIN_TPL_ID = import.meta.env.VITE_EMAILJS_ADMIN_TEMPLATE_ID; // admin
const CLINIC_EMAIL         = import.meta.env.VITE_CLINIC_EMAIL || "contact@physioborn.be";

/* ---------- CONFIG OUVERTURES ---------- */
const OPENING_HOURS = {
  1: [[8, 0, 12, 0], [14, 0, 19, 0]],
  2: [[8, 0, 12, 0], [14, 0, 19, 0]],
  3: [[8, 0, 12, 0], [14, 0, 19, 0]],
  4: [[8, 0, 12, 0], [14, 0, 19, 0]],
  5: [[8, 0, 12, 0], [14, 0, 18, 0]],
  6: [[9, 0, 12, 30]],
  0: [],
};
const SLOT_MINUTES = 30;
const LOOKAHEAD_DAYS = 14;

const SERVICES = [
  { id: "classique", label: "Kinésithérapie classique" },
  { id: "sport",     label: "Kinésithérapie du sport" },
  { id: "dos",       label: "Rééducation du dos" },
  { id: "respi",     label: "Kinésithérapie respiratoire" },
  { id: "domec",     label: "À domicile" },
];

/* ---------- UTILS ---------- */
const dayKey  = (d) => format(d, "yyyy-MM-dd");
const timeKey = (d) => format(d, "HH:mm");

function generateSlotsForDate(date) {
  const periods = OPENING_HOURS[date.getDay()] || [];
  const now = new Date();
  const slots = [];
  periods.forEach(([sh, sm, eh, em]) => {
    let cur = setMinutes(setHours(new Date(date), sh), sm);
    const end = setMinutes(setHours(new Date(date), eh), em);
    while (isBefore(cur, end)) {
      if (!isToday(date) || isBefore(now, cur)) slots.push(new Date(cur));
      cur = addMinutes(cur, SLOT_MINUTES);
    }
  });
  return slots;
}

function SectionTitle({ icon: Icon, title, subtitle }) {
  return (
    <div className="max-w-3xl mx-auto text-center mb-10">
      <div className="badge">{Icon && <Icon className="h-3.5 w-3.5 mr-1" />} {subtitle}</div>
      <h2 className="mt-4 text-3xl md:text-4xl font-semibold tracking-tight">{title}</h2>
    </div>
  );
}

/* ==================== PAGE PRINCIPALE ==================== */
export default function KineSite() {
  // Init EmailJS + permission notifications
  useEffect(() => {
    try {
      console.log("[ENV] service:", EMAILJS_SERVICE_ID);
      console.log("[ENV] client tpl:", EMAILJS_TEMPLATE_ID);
      console.log("[ENV] admin tpl:", EMAILJS_ADMIN_TPL_ID);
      console.log("[ENV] public key present:", !!EMAILJS_PUBLIC_KEY);
      if (!EMAILJS_PUBLIC_KEY) {
        console.error("Public key manquante. Vérifie .env.local et redémarre.");
        toast.error("EmailJS: clé publique manquante");
      } else {
        emailjs.init({ publicKey: EMAILJS_PUBLIC_KEY });
        console.log("EmailJS init OK");
      }
    } catch (e) {
      console.error("EmailJS init error:", e);
      toast.error("Erreur init EmailJS (voir console)");
    }
    if ("Notification" in window && Notification.permission === "default") {
      Notification.requestPermission().catch(() => {});
    }
  }, []);

  // Formulaire
  const [name, setName]     = useState("");
  const [email, setEmail]   = useState("");
  const [phone, setPhone]   = useState("");
  const [service, setService] = useState("classique");
  const [date, setDate]     = useState("");
  const [time, setTime]     = useState("");
  const [message, setMessage] = useState("");

  // Planning
  const [days, setDays]         = useState([]);
  const [booked, setBooked]     = useState({});
  const [focusIndex, setFocusIndex] = useState(0);

  // Refs pour scroll horizontal
  const scrollerRef = useRef(null);
  const itemRefs = useRef([]); // un ref par carte-jour

  // Préparer les jours
  useEffect(() => {
    const list = [];
    for (let i = 0; i < LOOKAHEAD_DAYS; i++) {
      const d = startOfDay(addDays(new Date(), i));
      list.push({ date: d, slots: generateSlotsForDate(d) });
    }
    setDays(list);
  }, []);

  // Charger créneaux déjà pris
  useEffect(() => {
    (async () => {
      const start = new Date();
      const end   = addDays(new Date(), LOOKAHEAD_DAYS);
      const q = query(
        collection(db, "bookings"),
        where("start", ">=", Timestamp.fromDate(start)),
        where("start", "<=", Timestamp.fromDate(end))
      );
      const snap = await getDocs(q);
      const map = {};
      snap.forEach(d => {
        const s = d.data().start.toDate();
        const dk = dayKey(s);
        const tk = timeKey(s);
        if (!map[dk]) map[dk] = new Set();
        map[dk].add(tk);
      });
      setBooked(map);
    })().catch(console.error);
  }, []);

  // Scroll auto quand on change de jour
  useEffect(() => {
    const el = itemRefs.current[focusIndex];
    if (el && typeof el.scrollIntoView === "function") {
      el.scrollIntoView({ behavior: "smooth", inline: "start", block: "nearest" });
    }
  }, [focusIndex, days.length]);

  // Sélection créneau
  function pickSlot(d, s) {
    setDate(dayKey(d));
    setTime(timeKey(s));
    const idx = days.findIndex(x => dayKey(x.date) === dayKey(d));
    if (idx >= 0) setFocusIndex(idx);
    toast.info(`Créneau sélectionné : ${format(s, "dd/MM à HH:mm")}`);
    document.getElementById("booking-form")?.scrollIntoView({ behavior: "smooth" });
  }

  const startISO = useMemo(() => (date && time ? `${date}T${time}:00` : null), [date, time]);

  /* ===== Envoi d’e-mails (client + cabinet) ===== */
async function sendEmails({ start }) {
  const human = format(start, "EEEE d MMM yyyy 'à' HH:mm", { locale: fr });
  const serviceLabel = SERVICES.find(s => s.id === service)?.label;

  // Sécurité : on loggue les destinataires calculés
  console.log("[EMAIL DESTS] client:", email, "admin:", CLINIC_EMAIL);

  // -------- Email CLIENT --------
  // -> Fournit to_email ET clinic_email pour couvrir tous les templates
  const clientPayload = {
    to_name: name,
    to_email: email,                // pour templates avec {{to_email}}
    clinic_email: CLINIC_EMAIL,     // pour templates qui l'utilisent (reply-to / footer / voire To)
    date_time: human,
    service_label: serviceLabel,
    phone,
    notes: message || "(aucune remarque)",
  };

  const clientPromise = emailjs
    .send(EMAILJS_SERVICE_ID, EMAILJS_TEMPLATE_ID, clientPayload)
    .catch(err => {
      console.error("Client email error:", err, clientPayload);
      throw err;
    });

  // -------- Email ADMIN --------
  // -> Fournit AUSSI to_email ET clinic_email pour couvrir tous les templates
  //    (selon que ton template admin ait To Email = {{clinic_email}} OU {{to_email}} OU une adresse fixe)
  const adminPayload = {
    to_name: "PhysioBorn",
    to_email: CLINIC_EMAIL,         // si le template attend {{to_email}}
    clinic_email: CLINIC_EMAIL,     // si le template attend {{clinic_email}}
    date_time: human,
    service_label: serviceLabel,
    phone,
    notes: `${name} • ${email || "sans email"} • ${message || "aucune remarque"}`,
  };

  const adminTpl = EMAILJS_ADMIN_TPL_ID || EMAILJS_TEMPLATE_ID;
  const adminPromise = emailjs
    .send(EMAILJS_SERVICE_ID, adminTpl, adminPayload)
    .catch(err => {
      console.error("Admin email error:", err, adminPayload);
      throw err;
    });

  const [c, a] = await Promise.allSettled([clientPromise, adminPromise]);
  if (c.status === "rejected" || a.status === "rejected") {
    console.error("EmailJS details:", c, a);
    toast.error("Email non envoyé (voir console)");
  } else {
    toast.success("Emails envoyés ✅");
  }
}


  /* ===== Réservation ===== */
  async function handleBooking(e) {
    e.preventDefault();
    if (!name || !phone || !startISO || !email) {
      toast.error("Nom, téléphone, e-mail et créneau sont requis.");
      return;
    }
    const start = parseISO(startISO);
    const end   = addMinutes(start, SLOT_MINUTES);

    const docId = `${date}_${time}_${service}`;
    const ref = doc(collection(db, "bookings"), docId);

    try {
      await runTransaction(db, async (tx) => {
        const snap = await tx.get(ref);
        if (snap.exists()) throw new Error("Ce créneau est déjà pris.");
        tx.set(ref, {
          name, email, phone, service,
          start: Timestamp.fromDate(start),
          end:   Timestamp.fromDate(end),
          notes: message || "",
          status: "confirmed",
          createdAt: Timestamp.now(),
        });
      });

      // MAJ UI locale
      setBooked((prev) => {
        const copy = { ...prev };
        const dk = dayKey(start);
        const tk = timeKey(start);
        if (!copy[dk]) copy[dk] = new Set();
        copy[dk].add(tk);
        return copy;
      });

      // Emails (client + cabinet)
      try { await sendEmails({ start }); } catch {}

      // Notif locale pour le patient
      if ("Notification" in window && Notification.permission === "granted") {
        new Notification("Votre RDV est confirmé ✅", {
          body: `${format(start, "EEE d MMM 'à' HH:mm", { locale: fr })} – ${SERVICES.find(s => s.id === service)?.label}`,
        });
      }

      toast.success("Réservation enregistrée ✅");
    } catch (err) {
      toast.error(err.message || "Erreur inconnue");
    }
  }

  /* ---------- UI HORAIRE (design pills + carrousel) ---------- */
  function DateBar() {
    return (
      <div className="flex items-center gap-2">
        <button
          className="p-2 rounded-lg border hover:bg-slate-50"
          onClick={() => setFocusIndex((i) => Math.max(0, i - 1))}
          title="Jour précédent"
        >
          <ChevronLeft className="h-4 w-4" />
        </button>

        <div className="flex-1 overflow-x-auto no-scrollbar">
          <div className="flex gap-2 min-w-max">
            {days.map((d, i) => {
              const isActive = i === focusIndex;
              return (
                <button
                  key={dayKey(d.date)}
                  onClick={() => setFocusIndex(i)}
                  className={`px-3 py-2 rounded-full text-sm border transition ${
                    isActive
                      ? "bg-teal-600 text-white border-teal-700"
                      : "bg-white border-slate-300 hover:bg-slate-50"
                  }`}
                  title={format(d.date, "EEEE d MMM", { locale: fr })}
                >
                  <div className="font-medium">{format(d.date, "EEE", { locale: fr })}</div>
                  <div className="text-xs opacity-80 -mt-0.5">{format(d.date, "d MMM", { locale: fr })}</div>
                </button>
              );
            })}
          </div>
        </div>

        <button
          className="p-2 rounded-lg border hover:bg-slate-50"
          onClick={() => setFocusIndex((i) => Math.min(days.length - 1, i + 1))}
          title="Jour suivant"
        >
          <ChevronRightIcon className="h-4 w-4" />
        </button>
      </div>
    );
  }

  function DayCard({ day, slots }) {
    const dk = dayKey(day);
    const taken = booked[dk] || new Set();
    const isClosed = slots.length === 0;

    return (
      <div className="min-w-[320px] max-w-[420px] shrink-0 card">
        <div className="p-4 border-b border-slate-200 flex items-center justify-between">
          <div>
            <div className="text-xs uppercase tracking-wide text-slate-500">
              {format(day, "EEEE", { locale: fr })}
            </div>
            <div className="font-semibold">{format(day, "d MMM yyyy", { locale: fr })}</div>
          </div>
          <div className={`px-2 py-1 rounded-full text-xs ${
            isClosed ? "bg-slate-100 text-slate-500" : "bg-emerald-100 text-emerald-700"
          }`}>
            {isClosed ? "Fermé" : "Ouvert"}
          </div>
        </div>

        <div className="p-4">
          {isClosed ? (
            <div className="text-slate-500 text-sm">Aucun créneau</div>
          ) : (
            <div className="flex flex-wrap gap-2">
              {slots.map((s) => {
                const tk = timeKey(s);
                const disabled = taken.has(tk);
                return (
                  <button
                    key={tk}
                    onClick={() => !disabled && pickSlot(day, s)}
                    disabled={disabled}
                    className={`px-4 py-2 rounded-full text-sm border transition shadow-sm ${
                      disabled
                        ? "bg-slate-100 text-slate-400 border-slate-200 cursor-not-allowed line-through"
                        : "bg-white hover:bg-teal-50 border-slate-300 hover:border-teal-400"
                    }`}
                    title={disabled ? "Déjà réservé" : "Choisir ce créneau"}
                  >
                    {format(s, "HH:mm")}
                  </button>
                );
              })}
            </div>
          )}
        </div>
      </div>
    );
  }

  function DaysScroller() {
    return (
      <div className="relative">
        <div
          ref={scrollerRef}
          className="mt-4 overflow-x-auto snap-x snap-mandatory no-scrollbar"
        >
          <div className="flex gap-4 pb-2" style={{ scrollSnapType: "x mandatory" }}>
            {days.map(({ date: d, slots }, i) => (
              <div
                key={dayKey(d)}
                ref={(el) => (itemRefs.current[i] = el)}
                className="snap-start"
                style={{ scrollSnapAlign: "start" }}
              >
                <DayCard day={d} slots={slots} />
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  /* -------------------- RENDER -------------------- */
  return (
    <div className="min-h-screen bg-gradient-to-b from-white to-slate-50">
      <Toaster richColors position="top-center" />

      {/* HEADER */}
      <header className="sticky top-0 z-40 backdrop-blur bg-white/70 border-b border-slate-200">
        <div className="container py-3 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <div className="h-9 w-9 rounded-xl bg-teal-100 grid place-items-center">
              <Stethoscope className="h-5 w-5 text-teal-700" />
            </div>
            <span className="font-semibold">PhysioBorn</span>
          </div>

          <div className="flex items-center gap-2">
            {/* Bouton test email admin */}
            <button
              type="button"
              onClick={async () => {
                try {
                  const now = new Date();
                  await emailjs.send(
                    EMAILJS_SERVICE_ID,
                    EMAILJS_ADMIN_TPL_ID || EMAILJS_TEMPLATE_ID,
                    {
                      to_name: "PhysioBorn",
                      to_email: CLINIC_EMAIL,
                      date_time: format(now, "EEE d MMM yyyy 'à' HH:mm", { locale: fr }),
                      service_label: "TEST",
                      phone: "—",
                      notes: "Email de test depuis le site",
                      clinic_email: CLINIC_EMAIL,
                    }
                  );
                  toast.success("Test email admin envoyé ✅");
                } catch (e) {
                  console.error("Test email error:", e);
                  toast.error("Échec test email (voir console)");
                }
              }}
              className="btn btn-outline text-xs"
            >
              Test email admin
            </button>

            <a href="#rdv" className="btn btn-primary text-sm"><Calendar className="h-4 w-4" /> RDV</a>
          </div>
        </div>
      </header>

      {/* HERO */}
      <section className="container py-16">
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
          <h1 className="text-4xl md:text-5xl font-semibold">Prendre rendez-vous</h1>
          <p className="mt-4 text-slate-600">Choisissez un créneau disponible et confirmez votre rendez-vous.</p>
        </motion.div>

        <div className="grid lg:grid-cols-2 gap-10 mt-10">
          {/* DISPONIBILITÉS */}
          <div id="rdv" className="space-y-4">
            <SectionTitle icon={Calendar} title="Disponibilités" subtitle={`Prochains ${LOOKAHEAD_DAYS} jours`} />
            <DateBar />
            <DaysScroller />
          </div>

        {/* FORMULAIRE */}
          <div className="card p-5">
            <div className="pb-4 border-b border-slate-200 mb-4">
              <div className="flex items-center gap-2 text-lg font-semibold">
                <Sparkles className="h-5 w-5 text-teal-600" /> Confirmer votre rendez-vous
              </div>
              <p className="text-slate-600 text-sm mt-1">30 minutes – première séance</p>
            </div>
            <form id="booking-form" onSubmit={handleBooking} className="grid gap-4">
              <input className="input" placeholder="Nom complet" value={name} onChange={(e) => setName(e.target.value)} required />
              <div className="grid sm:grid-cols-2 gap-3">
                <input className="input" type="email" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} required />
                <input className="input" placeholder="Téléphone" value={phone} onChange={(e) => setPhone(e.target.value)} required />
              </div>
              <div className="grid sm:grid-cols-2 gap-3">
                <select className="select" value={service} onChange={(e) => setService(e.target.value)}>
                  {SERVICES.map((s) => (
                    <option key={s.id} value={s.id}>{s.label}</option>
                  ))}
                </select>
                <div className="grid grid-cols-2 gap-2">
                  <input className="input" type="date" value={date} onChange={(e) => setDate(e.target.value)} required />
                  <input className="input" type="time" value={time} onChange={(e) => setTime(e.target.value)} required />
                </div>
              </div>
              <textarea className="textarea" placeholder="Message (optionnel)" value={message} onChange={(e) => setMessage(e.target.value)} />
              <button type="submit" className="btn btn-primary">Confirmer le rendez-vous</button>
            </form>
          </div>
        </div>

        {/* SERVICES */}
        <section id="services" className="container mx-auto py-16 px-0">
          <SectionTitle icon={Stethoscope} title="Nos services" subtitle="Ce que nous proposons" />
          <div className="grid md:grid-cols-3 gap-6">
            {SERVICES.map((s) => (
              <div key={s.id} className="card hover:shadow-lg transition-shadow">
                <div className="p-5 border-b border-slate-200">
                  <div className="text-lg font-semibold">{s.label}</div>
                  <p className="text-slate-600 text-sm">Approche personnalisée selon vos besoins.</p>
                </div>
                <div className="p-5">
                  <ul className="text-sm text-slate-600 space-y-2">
                    <li className="flex gap-2 items-start"><CheckCircle2 className="h-4 w-4 mt-0.5 text-teal-600" /> Bilan complet</li>
                    <li className="flex gap-2 items-start"><CheckCircle2 className="h-4 w-4 mt-0.5 text-teal-600" /> Programme d'exercices</li>
                    <li className="flex gap-2 items-start"><CheckCircle2 className="h-4 w-4 mt-0.5 text-teal-600" /> Suivi régulier</li>
                  </ul>
                </div>
              </div>
            ))}
          </div>
        </section>

        {/* CONTACT + INFOS */}
        <section id="contact" className="container mx-auto py-16 px-0">
          <SectionTitle icon={Mail} title="Nous écrire" subtitle="Question rapide ?" />
          <div className="grid md:grid-cols-2 gap-6">
            <div className="card bg-slate-50">
              <div className="p-5 border-b border-slate-200">
                <div className="text-lg font-semibold">Infos & accès</div>
                <p className="text-slate-600 text-sm">Transports, stationnement</p>
              </div>
              <div className="p-5 text-sm text-slate-600 space-y-2">
                <div className="flex items-center gap-2"><Phone className="h-4 w-4" /> +32 483/54.50.42</div>
                <div className="flex items-center gap-2"><Mail className="h-4 w-4" /> {CLINIC_EMAIL}</div>
                <div className="flex items-center gap-2"><MapPin className="h-4 w-4" /> Rue Sault à Sault 22, 7141 Carnières</div>
              </div>
            </div>
            <div className="card">
              <div className="p-5 border-b border-slate-200">
                <div className="flex items-center gap-2 text-lg font-semibold"><Clock className="h-5 w-5 text-teal-600" /> Horaires</div>
                <p className="text-slate-600 text-sm mt-1">Flexibles selon disponibilités</p>
              </div>
              <div className="p-5 text-sm space-y-1">
                <div>Lun–Ven : 8:00 – 20:00</div>
                <div>Sam : 9:00 – 12:30</div>
                <div>Dim : fermé</div>
              </div>
            </div>
          </div>
        </section>
      </section>

      {/* FOOTER */}
      <footer className="border-t border-slate-200">
        <div className="container py-10 text-sm flex flex-col md:flex-row items-center justify-between gap-3">
          <div className="text-slate-600">© {new Date().getFullYear()} PhysioBorn. Tous droits réservés.</div>
          <div className="flex items-center gap-4">
            <a href="#" className="hover:underline">Instagram</a>
            <a href="#" className="hover:underline">Facebook</a>
            <a href="#" className="hover:underline">WhatsApp</a>
          </div>
        </div>
      </footer>
    </div>
  );
}
